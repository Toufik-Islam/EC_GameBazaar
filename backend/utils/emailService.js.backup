const node  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransporter({
        service: 'gmail',
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
          user: process.env.EMAIL_USERNAME,
          pass: process.env.EMAIL_PASSWORD
        },
        tls: {
          rejectUnauthorized: false
        }
      });uire('nodemailer');
const path = require('path');
const pdfGenerator = require('./pdfGenerator');

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        service: process.env.EMAIL_SERVICE,
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT || 587,
        secure: process.env.EMAIL_SECURE === 'true',
        auth: {
          user: process.env.EMAIL_USERNAME,
          pass: process.env.EMAIL_PASSWORD
        }
      });

      // Verify connection configuration
      this.transporter.verify((error, success) => {
        if (error) {
          console.error('Email service configuration error:', error);
        } else {
          console.log('‚úÖ Email service is ready to send messages');
        }
      });
    } catch (error) {
      console.error('Failed to initialize email transporter:', error);
    }
  }
  async sendEmail(to, subject, html, text = null, attachments = []) {
    try {
      if (!this.transporter) {
        throw new Error('Email transporter not initialized');
      }

      const mailOptions = {
        from: process.env.EMAIL_FROM,
        to,
        subject,
        html,
        text: text || this.stripHtml(html),
        attachments
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ Email sent successfully to ${to}: ${subject}`);
      return {
        success: true,
        messageId: result.messageId,
        response: result.response
      };
    } catch (error) {
      console.error(`‚ùå Failed to send email to ${to}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  stripHtml(html) {
    return html.replace(/<[^>]*>/g, '');
  }

  // Email Templates
  getWelcomeEmailTemplate(user) {
    return {
      subject: 'üéÆ Welcome to GameBazaar!',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Welcome to GameBazaar</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; background: #667eea; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
            .highlight { color: #667eea; font-weight: bold; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéÆ Welcome to GameBazaar!</h1>
              <p>Your ultimate gaming destination</p>
            </div>
            <div class="content">
              <h2>Hello ${user.name}! üëã</h2>
              <p>Thank you for joining GameBazaar! We're excited to have you as part of our gaming community.</p>
              
              <h3>What's Next?</h3>
              <ul>
                <li>üéØ Browse our extensive game collection</li>
                <li>üõí Add games to your cart and wishlist</li>
                <li>üì¶ Enjoy fast and secure delivery</li>
                <li>‚≠ê Rate and review your favorite games</li>
              </ul>

              <p>Your account details:</p>
              <ul>
                <li><strong>Email:</strong> ${user.email}</li>
                <li><strong>Role:</strong> <span class="highlight">${user.role}</span></li>
                <li><strong>Registration Date:</strong> ${new Date().toLocaleDateString()}</li>
              </ul>

              <a href="${process.env.FRONTEND_URL}" class="button">Start Shopping Now! üõçÔ∏è</a>
              
              <p>If you have any questions, feel free to contact our support team.</p>
            </div>
            <div class="footer">
              <p>¬© 2025 GameBazaar. All rights reserved.</p>
              <p>You received this email because you registered for a GameBazaar account.</p>
            </div>
          </div>
        </body>
        </html>
      `
    };
  }
  getOrderConfirmationTemplate(order, user) {
    // Ensure we have the items array in the correct format
    const items = order.items || order.orderItems?.map(item => ({
      name: item.game?.title || 'Game no longer available',
      platform: item.game?.platform || 'N/A',
      quantity: item.quantity,
      price: item.price
    })) || [];

    const itemsHTML = items.map(item => `
      <tr>
        <td style="padding: 10px; border-bottom: 1px solid #eee;">
          <strong>${item.name}</strong><br>
          <small>Platform: ${item.platform}</small>
        </td>
        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: center;">
          ${item.quantity}
        </td>
        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">
          ‡ß≥${item.price.toFixed(2)}
        </td>
      </tr>
    `).join('');

    // Calculate total amount safely
    const totalAmount = order.totalAmount || order.totalPrice || 0;

    return {
      subject: `üéÆ Order Confirmation #${order._id.toString().slice(-8).toUpperCase()}`,
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Order Confirmation</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .order-info { background: white; padding: 20px; border-radius: 5px; margin: 20px 0; }
            .order-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            .order-table th { background: #667eea; color: white; padding: 12px; text-align: left; }
            .order-table td { padding: 10px; border-bottom: 1px solid #eee; }
            .total-row { font-weight: bold; background: #f0f0f0; }
            .status-badge { display: inline-block; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; }
            .status-pending { background: #fff3cd; color: #856404; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéÆ Order Confirmed!</h1>
              <p>Thank you for your purchase</p>
            </div>
            <div class="content">
              <h2>Hello ${user.name}! üëã</h2>
              <p>Great news! We've received your order and it's being processed.</p>
              
              <div class="order-info">
                <h3>Order Details</h3>
                <p><strong>Order ID:</strong> #${order._id.toString().slice(-8).toUpperCase()}</p>
                <p><strong>Status:</strong> <span class="status-badge status-pending">${order.status}</span></p>                <p><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString()}</p>
                <p><strong>Total Amount:</strong> ‡ß≥${totalAmount.toFixed(2)}</p>
              </div>

              <h3>Items Ordered</h3>
              <table class="order-table">
                <thead>
                  <tr>
                    <th>Game</th>
                    <th style="text-align: center;">Quantity</th>
                    <th style="text-align: right;">Price</th>
                  </tr>
                </thead>
                <tbody>
                  ${items}                  <tr class="total-row">
                    <td colspan="2">Total</td>
                    <td style="text-align: right;">‡ß≥${totalAmount.toFixed(2)}</td>
                  </tr>
                </tbody>
              </table>              <div class="order-info">
                <h3>What's Next?</h3>
                <ul>
                  <li>üìã Your order is currently pending admin approval</li>
                  <li>‚úÖ You'll receive another email when your order is approved</li>
                  <li>üì¶ Once approved, your games will be processed for delivery</li>
                  <li>üìß We'll keep you updated throughout the process</li>
                  <li>üìÑ <strong>Your receipt is attached to this email as a PDF</strong></li>
                </ul>
              </div>
              
              <p>If you have any questions about your order, feel free to contact our support team.</p>
            </div>
            <div class="footer">
              <p>¬© 2025 GameBazaar. All rights reserved.</p>
              <p>Order ID: #${order._id.toString().slice(-8).toUpperCase()}</p>
            </div>
          </div>
        </body>
        </html>
      `
    };
  }
  getOrderStatusUpdateTemplate(order, user, status) {
    // Calculate total amount safely
    const totalAmount = order.totalAmount || order.totalPrice || 0;
    
    const statusConfig = {
      'approved': {
        title: '‚úÖ Order Approved!',
        message: 'Great news! Your order has been approved and is now being processed.',
        badgeClass: 'status-approved',
        badgeStyle: 'background: #d4edda; color: #155724;'
      },
      'processing': {
        title: '‚ö° Order Processing',
        message: 'Your order is currently being processed and will be shipped soon.',
        badgeClass: 'status-processing',
        badgeStyle: 'background: #cce5f0; color: #0c5460;'
      },
      'shipped': {
        title: 'üöö Order Shipped!',
        message: 'Your order has been shipped and is on its way to you!',
        badgeClass: 'status-shipped',
        badgeStyle: 'background: #e2e3e5; color: #41464b;'
      },
      'delivered': {
        title: 'üì¶ Order Delivered!',
        message: 'Your order has been successfully delivered. Enjoy your games!',
        badgeClass: 'status-delivered',
        badgeStyle: 'background: #d1ecf1; color: #0c5460;'
      },
      'cancelled': {
        title: '‚ùå Order Cancelled',
        message: 'We regret to inform you that your order has been cancelled.',
        badgeClass: 'status-cancelled',
        badgeStyle: 'background: #f8d7da; color: #721c24;'
      }
    };

    const config = statusConfig[status] || statusConfig['processing'];

    return {
      subject: `üéÆ Order Update: ${config.title.replace(/[^\w\s]/gi, '')} - #${order._id.toString().slice(-8).toUpperCase()}`,
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Order Status Update</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .order-info { background: white; padding: 20px; border-radius: 5px; margin: 20px 0; }
            .status-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; font-size: 14px; font-weight: bold; text-transform: uppercase; ${config.badgeStyle} }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
            .highlight { color: #667eea; font-weight: bold; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>${config.title}</h1>
              <p>Order #${order._id.toString().slice(-8).toUpperCase()}</p>
            </div>
            <div class="content">
              <h2>Hello ${user.name}! üëã</h2>
              <p>${config.message}</p>
              
              <div class="order-info">
                <h3>Order Information</h3>
                <p><strong>Order ID:</strong> #${order._id.toString().slice(-8).toUpperCase()}</p>
                <p><strong>New Status:</strong> <span class="status-badge">${status}</span></p>                <p><strong>Updated:</strong> ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
                <p><strong>Total Amount:</strong> ‡ß≥${totalAmount.toFixed(2)}</p>
              </div>              ${status === 'approved' ? `
                <div class="order-info">
                  <h3>What's Next?</h3>
                  <ul>
                    <li>üîÑ Your order will be processed within 24 hours</li>
                    <li>üì¶ You'll receive shipping information once dispatched</li>
                    <li>üöö Estimated delivery: 3-5 business days</li>
                    <li>üìÑ <strong>Updated receipt is attached to this email</strong></li>
                  </ul>
                </div>
              ` : ''}              ${status === 'shipped' ? `
                <div class="order-info">
                  <h3>Tracking Information</h3>
                  <p>Your package is on its way! You can track your shipment using the tracking number provided by our delivery partner.</p>
                  <p><strong>Estimated Delivery:</strong> 1-3 business days</p>
                  <p>üìÑ <strong>Updated receipt is attached to this email</strong></p>
                </div>
              ` : ''}

              ${status === 'cancelled' ? `
                <div class="order-info">
                  <h3>Next Steps</h3>
                  <ul>
                    <li>üí∞ Any payment made will be refunded within 5-7 business days</li>
                    <li>üìß You'll receive a refund confirmation email</li>
                    <li>üõçÔ∏è Feel free to place a new order anytime</li>
                  </ul>
                </div>
              ` : ''}
              
              <p>If you have any questions, please don't hesitate to contact our support team.</p>
            </div>
            <div class="footer">
              <p>¬© 2025 GameBazaar. All rights reserved.</p>
              <p>Order ID: #${order._id.toString().slice(-8).toUpperCase()}</p>
            </div>
          </div>
        </body>
        </html>
      `
    };
  }
  // Main methods for sending different types of emails
  async sendWelcomeEmail(user) {
    const template = this.getWelcomeEmailTemplate(user);
    return await this.sendEmail(user.email, template.subject, template.html);
  }

  async sendOrderConfirmationEmail(order, user) {
    const template = this.getOrderConfirmationTemplate(order, user);
    return await this.sendEmail(user.email, template.subject, template.html);
  }

  async sendOrderStatusUpdateEmail(order, user, status) {
    const template = this.getOrderStatusUpdateTemplate(order, user, status);
    return await this.sendEmail(user.email, template.subject, template.html);
  }

  // New methods with PDF attachments
  async sendOrderConfirmationEmailWithPDF(order, user) {
    try {
      const template = this.getOrderConfirmationTemplate(order, user);
      
      // Generate PDF receipt
      const pdfBuffer = await pdfGenerator.generateOrderReceiptPDF(order, user);
      
      const attachments = [{
        filename: `GameBazaar-Receipt-${order._id.toString().slice(-8).toUpperCase()}.pdf`,
        content: pdfBuffer,
        contentType: 'application/pdf'
      }];

      console.log(`üìÑ Generated PDF receipt for order ${order._id}`);
      
      return await this.sendEmail(user.email, template.subject, template.html, null, attachments);
    } catch (error) {
      console.error('‚ùå Error sending order confirmation email with PDF:', error);
      // Fallback to sending email without PDF
      console.log('üìß Sending email without PDF as fallback...');
      return await this.sendOrderConfirmationEmail(order, user);
    }
  }

  async sendOrderStatusUpdateEmailWithPDF(order, user, status) {
    try {
      const template = this.getOrderStatusUpdateTemplate(order, user, status);
        // Generate PDF receipt for approved/completed orders
      if (status === 'approved' || status === 'completed' || status === 'shipped' || status === 'delivered') {
        const pdfBuffer = await pdfGenerator.generateOrderReceiptPDF(order, user);
        
        const attachments = [{
          filename: `GameBazaar-Receipt-${order._id.toString().slice(-8).toUpperCase()}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf'
        }];

        console.log(`üìÑ Generated PDF receipt for order status update ${order._id} (${status})`);
        
        return await this.sendEmail(user.email, template.subject, template.html, null, attachments);
      } else {
        // For other statuses, send without PDF
        return await this.sendEmail(user.email, template.subject, template.html);
      }
    } catch (error) {
      console.error('‚ùå Error sending order status update email with PDF:', error);
      // Fallback to sending email without PDF
      console.log('üìß Sending email without PDF as fallback...');
      return await this.sendOrderStatusUpdateEmail(order, user, status);
    }
  }
}

module.exports = new EmailService();
